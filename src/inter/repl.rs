use anyhow::Error;

use super::ast::*;
use super::lexer::*;
use std::io::{self, Write};

const PROMPT: &str = "üî• ";
const DRAGON: &str = r"
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†§‚£≤‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†ñ‚†ã‚¢Ä‚†û‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†ú‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°∞‚†ä‚†Ä‚†Ä‚°†‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†ä‚°∞‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°º‚†Å‚†Ä‚†Ä‚°ú‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†§‚†ö‚†Å‚°ú‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚†§‚†ñ‚†à‚†Ä‚†Ä‚¢Ä‚°ú‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†î‚†ì‚†≤‚¢§‚£∏‚†í‚£ä‚£≠‚†õ‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚¢ø‚°∂‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚£π‚†é‚†Ä‚†Ä‚†ë‚°Ñ‚†Ä‚¢Ä‚°†‚†î‚¢ä‚°•‚¢∫‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†é‚†Ä‚†Ä‚†Ä‚£†‚†û‚†Å‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚†ã‚†Å‚£†‚†û‚†Å‚†Ä‚¢∏‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†É‚†Ä‚°†‚†ä‚°ú‚†Å‚†Ä‚†Ä‚†Ä‚¢Ä‚°ä‚†Å‚†Å‚†Ä‚¢ä‚°Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£â‚£ì‚£¶‚°§‚†§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚°§‚†ä‚†Å‚†∏‚†Ä‚†Ä‚†Ä‚°†‚°ñ‚°ù‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢â‚°©‚†≠‚†í‚¢ã‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°∏‚†Å‚†Ä‚†Ä‚†Ä‚†ë‚†í‚†õ‚†í‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†§‚£Ä‚°Ä‚†à‚£á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†ú‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚†§‚†Ñ‚†Ä‚†Ä‚†Ä‚°∞‚†ö‚¢ß‚†â‚†í‚†í‚†Æ‚†Ω‚£æ‚£¶‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚†ã‚†Å‚°†‚£ñ‚†Ç‚†Ä‚†Ä‚†Ä‚°†‚†ã‚†â‚†Ä‚°Ä‚†Ä‚†Ä‚¢Ä‚°¥‚†Å‚†Ä‚†∏‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†ô‚¢å‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†ò‚†ê‚†Å‚£Ä‚°†‚†î‚†ã‚£Ä‚£Ä‚°¥‚†ö‚†ì‚°∂‚£û‚£â‚£Ä‚£Ä‚°†‚¢§‚†á‚†Ä‚†Ä‚†Ä‚¢∞‚£É‚°Ä‚†à‚¢≥‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ß‚£Ä‚£†‚°ä‚†Å‚°Ä‚£†‚†û‚†Å‚†Ä‚†Ä‚†Ä‚°ú‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°ú‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚†à‚†ë‚¢Ñ‚¢≥‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚£Ω‚¢ª‚°è‚†Å‚†Ä‚†Ä‚†Ä‚¢Ä‚†û‚†ë‚†¶‚†§‚†§‚†§‚†Ñ‚°∏‚†Å‚†Ä‚†Ä‚†Ä‚¢∏‚†â‚£Ü‚†Ä‚†Ä‚†ò‚°æ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†π‚†Ä‚†É‚†Ä‚†Ä‚†Ä‚¢Ä‚¢è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°∞‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†ò‚°Ñ‚†Ä‚†Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚†Ä‚†ë‚†¶‚†§‚†§‚†Ñ‚¢≤‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£Ü‚£Ä‚£π
";
fn print_parser_errors(errors: Vec<Error>) {
    println!("{}", DRAGON);
    println!("Woops! We ran into some dragon problems here!");
    for e in errors {
        println!("{}", e);
    }
}

pub fn start() {
    loop {
        print!("{PROMPT}");
        io::stdout().flush().unwrap();
        let mut buf = String::new();

        match io::stdin().read_line(&mut buf) {
            Ok(0) => break,
            Ok(_) => {}
            Err(e) => panic!("{e}"),
        };

        let toks = Lexer::new(buf).get_deez_toks();
        let program = Parser::new(&toks).get_deez_program();

        if !program.errors.is_empty() {
            print_parser_errors(program.errors);
            continue;
        }

        println!("{:#?}\n", program.statements);
    }
}
